# -*- coding: utf-8 -*-
"""Copy of Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jyWIuWcJUPPbVXO3RA6p2nF4dxMNkyl1
"""

# =============================
# 1️⃣ Setup and constants
# =============================
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import quad

# Updated 2025 SFT baseline constants
H0_km = 68.05                              # km/s/Mpc
H0 = H0_km * 1000 / (3.085677581e22)       # s^-1
c = 2.99792458e8                           # m/s
G = 6.67430e-11                            # m^3/kg/s^2
M_m = 9.74010e53                           # kg
R_c = 1.44663e27                           # m
R_0 = 4.39448e26                           # m
Omega_m0 = 0.31500
Omega_r0 = 9.03400e-5
Omega_DE0 = 0.68491
rho_DE0 = 5.95765e-27                      # kg/m^3

# =============================
# 2️⃣ Define H(a)
# =============================
def H_LCDM(a):
    """Standard H(a) including radiation and dark energy."""
    return H0 * np.sqrt(Omega_m0*a**-3 + Omega_r0*a**-4 + Omega_DE0)

# =============================
# 3️⃣ Compute integrand curves
# =============================
a_vals = np.logspace(-6, 0, 500)
integrand_with_r = 1 / (a_vals * H_LCDM(a_vals))
integrand_no_r = 1 / (a_vals * (H0 * np.sqrt(Omega_m0*a_vals**-3 + Omega_DE0)))

# =============================
# 4️⃣ Plot Figure A1
# =============================
plt.figure(figsize=(7,5))
plt.loglog(a_vals, integrand_with_r/H0, label="With radiation")
plt.loglog(a_vals, integrand_no_r/H0, '--', label="No radiation")
plt.xlabel("Scale factor $a$")
plt.ylabel(r"Integrand $1/(aH(a))$ (normalized to $H_0^{-1}$)")
plt.legend()
plt.grid(True, which='both', ls=':')
plt.title("Integrand of the cosmic age $t_0$")
plt.tight_layout()
plt.show()

def Omegas(z, alpha):
    E2 = E_SFT(z, alpha)**2
    Om = Omega_m0*(1+z)**3/E2
    Or = Omega_r0*(1+z)**4/E2
    Ode = Omega_DE0/(1+z)**(3*(1-alpha))/E2
    return Om, Or, Ode

z_vals = np.linspace(0,10,300)
Omegas_LCDM = np.array([Omegas(z,1) for z in z_vals])
Omegas_quint = np.array([Omegas(z,0.99) for z in z_vals])
Omegas_phant = np.array([Omegas(z,1.01) for z in z_vals])

plt.figure(figsize=(8,5))
plt.plot(z_vals, Omegas_LCDM[:,0], 'b-', label=r'$\Omega_m$ ΛCDM')
plt.plot(z_vals, Omegas_LCDM[:,2], 'r-', label=r'$\Omega_{\rm DE}$ ΛCDM')
plt.plot(z_vals, Omegas_LCDM[:,1], 'g-', label=r'$\Omega_r$ ΛCDM')
plt.plot(z_vals, Omegas_quint[:,2], 'r--', label='SFT α=0.99')
plt.plot(z_vals, Omegas_phant[:,2], 'r-.', label='SFT α=1.01')
plt.xlabel("Redshift $z$")
plt.ylabel(r"Fractional density $\Omega_i(z)$")
plt.ylim(1e-4, 1.1)
plt.yscale('log')
plt.title("Evolution of fractional energy densities in ΛCDM vs. SFT")
plt.legend(loc='best', fontsize=8)
plt.grid(True, ls=':')
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# --- constants reused ---
z_vals = np.linspace(0, 4, 300)
alphas = [0.99, 1.00, 1.01]
Omega_m0, Omega_r0, Omega_DE0 = 0.315, 9.034e-5, 0.68491

def E_LCDM(z):
    return np.sqrt(Omega_m0*(1+z)**3 + Omega_r0*(1+z)**4 + Omega_DE0)

def E_SFT(z, alpha):
    a = 1/(1+z)
    return np.sqrt(Omega_m0*(1+z)**3 + Omega_r0*(1+z)**4 + Omega_DE0*a**(3*(1-alpha)))

E_LCDM_vals = E_LCDM(z_vals)

plt.figure(figsize=(7,5))
for alpha in alphas:
    E_SFT_vals = E_SFT(z_vals, alpha)
    ratio = E_SFT_vals / E_LCDM_vals - 1
    plt.plot(z_vals, ratio*100, label=f"$\\alpha={alpha}$")

plt.axhline(0, color='gray', ls='--')
plt.xlabel("Redshift $z$")
plt.ylabel(r"Fractional deviation $(H_{\rm SFT}/H_{\Lambda{\rm CDM}} - 1)\,[\%]$")
plt.title("Fractional Hubble function deviation: $H_{\rm SFT}(z)/H_{\Lambda{\rm CDM}}(z)$")
plt.grid(True, ls=':')
plt.legend()
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# --- constants reused ---
z_vals = np.linspace(0, 4, 300)
alphas = [0.99, 1.00, 1.01]
Omega_m0, Omega_r0, Omega_DE0 = 0.315, 9.034e-5, 0.68491

def E_LCDM(z):
    return np.sqrt(Omega_m0*(1+z)**3 + Omega_r0*(1+z)**4 + Omega_DE0)

def E_SFT(z, alpha):
    a = 1.0/(1.0+z)
    return np.sqrt(Omega_m0*(1+z)**3 + Omega_r0*(1+z)**4 + Omega_DE0 * a**(3.0*(1.0-alpha)))

E_LCDM_vals = E_LCDM(z_vals)

plt.figure(figsize=(7,5))
for alpha in alphas:
    E_SFT_vals = E_SFT(z_vals, alpha)
    ratio = E_SFT_vals / E_LCDM_vals - 1.0
    plt.plot(z_vals, ratio*100.0, label=fr"$\alpha={alpha}$")

plt.axhline(0, linestyle='--')
plt.xlabel(r"Redshift $z$")
plt.ylabel(r"Fractional deviation $(H_{\rm SFT}/H_{\Lambda\mathrm{CDM}} - 1)\,[\%]$")
plt.title(r"Fractional Hubble function deviation: $H_{\rm SFT}(z)/H_{\Lambda\mathrm{CDM}}(z)$")
plt.grid(True, linestyle=':')
plt.legend()
plt.tight_layout()
plt.show()